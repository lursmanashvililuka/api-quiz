[{"/home/luka/Desktop/api-quiz/src/index.js":"1","/home/luka/Desktop/api-quiz/src/App.js":"2","/home/luka/Desktop/api-quiz/src/reportWebVitals.js":"3","/home/luka/Desktop/api-quiz/src/components/SelectQuizType/SelectQuizType.js":"4","/home/luka/Desktop/api-quiz/src/components/Tasks/Tasks.js":"5"},{"size":518,"mtime":1674237682628,"results":"6","hashOfConfig":"7"},{"size":608,"mtime":1674242674777,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1674237682628,"results":"9","hashOfConfig":"7"},{"size":2581,"mtime":1674240605587,"results":"10","hashOfConfig":"7"},{"size":4901,"mtime":1674245272399,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bt3yzn",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"/home/luka/Desktop/api-quiz/src/index.js",[],[],"/home/luka/Desktop/api-quiz/src/App.js",[],[],"/home/luka/Desktop/api-quiz/src/reportWebVitals.js",[],[],"/home/luka/Desktop/api-quiz/src/components/SelectQuizType/SelectQuizType.js",["29","30","31"],[],"import React from 'react'\nimport './SelectQuizType.css'\nimport Tasks from '../Tasks/Tasks'\n\nclass SelectQuizType extends React.Component{\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\ttrivia_category: '',\n\t\t\ttrivia_difficulty: '',\n\t\t\tQAarray: [],\n\t\t\tisTaskDisplayed: false\n\t\t}\n\t}\n\n\t// save data of inputs in this.state\n\thandleChange = (event) => {\n        const {name, value} = event.target\n        this.setState({\n            [name]: value,\n        })\n    }\n\n    // fetch quiz By user-entered criteria, then change isTaskDisplayed to true and clean up input values in state\n    getQuiz = () => {\n    \tfetch(`https://opentdb.com/api.php?amount=10&category=${this.state.trivia_category}&difficulty=${this.state.trivia_difficulty}`)\n    \t.then(response => response.json())\n    \t.then(data => {\n    \t\tthis.setState({\n    \t\t\tQAarray: data.results,\n            \tisTaskDisplayed: !this.state.isTaskDisplayed,\n            \ttrivia_category: '',\n            \ttrivia_difficulty: ''\n        \t})\n    \t})\n    \t\n    }\n\t\n\trender() {\n\t\tconst { QAarray, trivia_difficulty, trivia_category, isTaskDisplayed } = this.state\n\t\treturn(\n\t\t\tisTaskDisplayed \n\t\t\t? \n\t\t\t<Tasks QAarray={QAarray} getQuiz={this.getQuiz} /> \n\t\t\t:\n\t\t\t<div>\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<h1 className='tc'>select category and difficulty here</h1>\n\t\t\t\t\t<h3>you should start with easy ones</h3>\n\t\t\t\t</div>\n\t\t\t\t<div className='allButtons tc'>\n\t\t\t\t\t{\t// check both fields if they are not empty, display dificulty and then category, when they are entered display start button\n\t\t\t\t\t\ttrivia_difficulty != '' && trivia_category != '' \n\t\t\t\t\t\t?\n\t\t\t\t\t\t\t<button className=\"button\" onClick={this.getQuiz}>Start</button>\n\t\t\t\t\t\t: \n\t\t\t\t\t\t\ttrivia_difficulty != ''\n\t\t\t\t\t\t?\n\t\t\t\t\t\t\t<select value={trivia_category} name=\"trivia_category\" className=\"button\" onChange={this.handleChange}>\n\t\t\t\t\t\t\t\t<option value=\"any\">Select Category</option>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.props.categories[0].map((genre, index) => {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<option key={index} value={genre.id}>{genre.name}</option>\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t:\n\t\t\t\t\t\t\t<select value={this.state.trivia_difficulty} name=\"trivia_difficulty\" className=\"button\" onChange={this.handleChange}>\n\t\t\t\t\t\t\t\t<option value=\"any\">Select difficulty</option>\n\t\t\t\t\t\t\t\t<option value=\"easy\">Easy</option>\n\t\t\t\t\t\t\t\t<option value=\"medium\">Med</option>\n\t\t\t\t\t\t\t\t<option value=\"hard\">Hard</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t<p className='tc ma2'>Until you startremember 1 correct answer = 20 points</p>\n\t\t\t</div>\n\t\t\t\n\t\t)\n\t}\n}\n\n\nexport default SelectQuizType","/home/luka/Desktop/api-quiz/src/components/Tasks/Tasks.js",["32","33","34","35","36","37","38","39"],[],"import React from 'react'\nimport './Tasks.css'\nimport SelectQuizType from '../SelectQuizType/SelectQuizType'\n\nclass Tasks extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tcurrentTask: 0,\n\t\t\ttotalScores: 0\n\t\t}\n\t}\n\n\tchangeQuestionForWrong = () => {\n\t\tthis.setState({\n\t\t\tcurrentTask: this.state.currentTask + 1\n\t\t})\n\t}\n\n\tchangeQuestionForCorrect = () => {\n\t\tthis.setState({\n\t\t\tcurrentTask: this.state.currentTask + 1,\n\t\t\ttotalScores: this.state.totalScores + 20\n\t\t})\n\t}\n\n\trestartQuiz = () => {\n\t\tthis.setState({currentTask: 0, totalScores: 0})\n\t}\n\n\tshuffleFourAnswer = () => {\n\t\tconst { currentTask } = this.state\n\t\tconst { QAarray } = this.props\n\t\tlet num = Math.floor(Math.random() * 4)\n\t\tif (num == 0 ) {\n\t\t\treturn (\n\t\t\t\t<div className='answers'>\n\t\t\t\t\t<button onClick={this.changeQuestionForCorrect} className='answer' >{QAarray[currentTask].correct_answer}</button>\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[0]}</button>\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[1]}</button>\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[2]}</button>\n\t\t\t\t</div>\n\t\t\t)\n\t\t} else if(num == 1) {\n\t\t\treturn (\n\t\t\t\t<div className='answers'>\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[0]}</button>\n\t\t\t\t\t<button onClick={this.changeQuestionForCorrect} className='answer' >{QAarray[currentTask].correct_answer}</button>\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[1]}</button>\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[2]}</button>\n\t\t\t\t</div>\n\t\t\t)\n\t\t} else if(num == 2) {\n\t\t\treturn (\n\t\t\t\t<div className='answers'>\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[0]}</button>\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[1]}</button>\n\t\t\t\t\t<button onClick={this.changeQuestionForCorrect} className='answer' >{QAarray[currentTask].correct_answer}</button>\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[2]}</button>\n\t\t\t\t</div>\n\t\t\t)\n\t\t} else if(num == 3) {\n\t\t\treturn (\n\t\t\t\t<div className='answers'>\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong}  className='answer' >{QAarray[currentTask].incorrect_answers[0]}</button>\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[1]}</button>\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[2]}</button>\n\t\t\t\t\t<button onClick={this.changeQuestionForCorrect} className='answer' >{QAarray[currentTask].correct_answer}</button>\n\t\t\t\t</div>\n\t\t\t)\n\t\t\t\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div><h1> error </h1></div>\n\t\t\t)\n\t\t}\n\t}\n\n\tshuffleTwoAnswer = () => {\n\t\tconst { currentTask } = this.state\n\t\tconst { QAarray } = this.props\n\t\tlet num = Math.floor(Math.random() * 2)\n\t\tif(num == 0) {\n\t\t\treturn (\n\t\t\t\t<div className='answers tc'>\n\t\t\t\t\t<button onClick={this.changeQuestionForCorrect} className='answer' >{QAarray[currentTask].correct_answer}</button>\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[0]}</button>\n\t\t\t\t</div>\n\t\t\t)\n\t\t} else if(num == 1) {\n\t\t\treturn (\n\t\t\t\t<div className='answers tc'>\n\t\t\t\t\t<button onClick={this.changeQuestionForWrong} className='answer' >{QAarray[currentTask].incorrect_answers[0]}</button>\n\t\t\t\t\t<button onClick={this.changeQuestionForCorrect} className='answer' >{QAarray[currentTask].correct_answer}</button>\n\t\t\t\t</div>\n\t\t\t)\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div><h1> error </h1></div>\n\t\t\t)\n\t\t}\n\t}\n\n\trender() {\n\t\t// destructure states\n\t\tconst { currentTask, totalScores } = this.state\n\t\tconst { QAarray, getQuiz } = this.props\n\t\treturn (\n\t\t<div className='tc'>\n\t\t\t{\n\t\t\t\tcurrentTask < QAarray.length\n\t\t\t\t? \n\t\t\t\t<div className='questionAndAnswers ma2 tc'>\n\t\t\t\t\t<div className='question'><h4 className='tc'>{QAarray[currentTask].question}</h4></div>\n\t\t\t\t\t{\n\t\t\t\t\t\tQAarray[currentTask].incorrect_answers.length == 1 \n\t\t\t\t\t\t?\n\t\t\t\t\t\tthis.shuffleTwoAnswer()\n\t\t\t\t\t\t:\n\t\t\t\t\t\tthis.shuffleFourAnswer()\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t</div>\n\n\t\t\t\t: \n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<h1> YOUR SCORE</h1>\n\t\t\t\t\t<h1 className='tc'>{`${totalScores}`}</h1>\n\t\t\t\t\t{\n\t\t\t\t\t\ttotalScores <= 0 ? <h4>whait... what?</h4> : totalScores <= 40 ? <h4>that's okay</h4> : <h4>Really nice try</h4>\n\t\t\t\t\t}\n\t\t\t\t\t<button onClick={getQuiz} className='button'>new quiz</button>\n\t\t\t\t\t<button onClick={this.restartQuiz} className='button'>reset</button>\n\t\t\t\t</div>\n\t\t\t}\n\t\t</div>\n\t\t\t\n\t\t)\n\t}\n} \n\n\nexport default Tasks;",{"ruleId":"40","severity":1,"message":"41","line":53,"column":25,"nodeType":"42","messageId":"43","endLine":53,"endColumn":27},{"ruleId":"40","severity":1,"message":"41","line":53,"column":50,"nodeType":"42","messageId":"43","endLine":53,"endColumn":52},{"ruleId":"40","severity":1,"message":"41","line":57,"column":26,"nodeType":"42","messageId":"43","endLine":57,"endColumn":28},{"ruleId":"44","severity":1,"message":"45","line":3,"column":8,"nodeType":"46","messageId":"47","endLine":3,"endColumn":22},{"ruleId":"40","severity":1,"message":"48","line":35,"column":11,"nodeType":"42","messageId":"43","endLine":35,"endColumn":13},{"ruleId":"40","severity":1,"message":"48","line":44,"column":17,"nodeType":"42","messageId":"43","endLine":44,"endColumn":19},{"ruleId":"40","severity":1,"message":"48","line":53,"column":17,"nodeType":"42","messageId":"43","endLine":53,"endColumn":19},{"ruleId":"40","severity":1,"message":"48","line":62,"column":17,"nodeType":"42","messageId":"43","endLine":62,"endColumn":19},{"ruleId":"40","severity":1,"message":"48","line":83,"column":10,"nodeType":"42","messageId":"43","endLine":83,"endColumn":12},{"ruleId":"40","severity":1,"message":"48","line":90,"column":17,"nodeType":"42","messageId":"43","endLine":90,"endColumn":19},{"ruleId":"40","severity":1,"message":"48","line":116,"column":53,"nodeType":"42","messageId":"43","endLine":116,"endColumn":55},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unused-vars","'SelectQuizType' is defined but never used.","Identifier","unusedVar","Expected '===' and instead saw '=='."]